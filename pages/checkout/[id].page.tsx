import { useContext, useState } from "react";

import BodySingle from "dh-marvel/components/layouts/body/single/body-single";
import { getComic } from "dh-marvel/services/marvel/marvel.service";
import { CheckoutContext } from "context/checkout.context";
import { checkoutSchema } from "util/yup/yupValidationSchema";
import { CheckoutInput } from "dh-marvel/features/checkout/checkout.types";

import { Comic } from "types/types";

import { GetServerSideProps, NextPage } from "next";
import { useRouter } from "next/router";
import Head from "next/head";

import { Container } from "@mui/system";
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardMedia from '@mui/material/CardMedia';
import Typography from '@mui/material/Typography';
import { Button, FormControl, TextField, Snackbar, Alert } from "@mui/material";
import { styled } from '@mui/system';

import axios from "axios";

import { useForm } from "react-hook-form";
import { yupResolver } from '@hookform/resolvers/yup';
import LayoutCheckout from "dh-marvel/components/layouts/layout-checkout";

interface DataProps {
    data: Comic;
}

const InputBox = styled(`div`)`
    margin: 0.75rem 0;    
`

const Flag = styled(`span`)`
    font-weight: bolder;
    font-size: large;
`

const Checkout: NextPage<DataProps> = ({ data }: DataProps) => {

    const { register, handleSubmit, formState: { errors } } = useForm<CheckoutInput>({
        resolver: yupResolver(checkoutSchema)
    });

    const { handleCheckout } = useContext(CheckoutContext);
    const [open, setOpen] = useState(false);
    const [messageError, setMessageError] = useState("");
    const router = useRouter();

    const onSubmit = async (payData: CheckoutInput) => {
        const payload = {
            ...payData,
            card: { ...payData.card, number: payData.card.number.replace(" ", "") },
            order: {
                name: data.title,
                image: `${data.thumbnail.path}.${data.thumbnail.extension}`,
                price: data.price
            }
        };

        await axios.post("/api/checkout", payload)
        .then(res => {
            handleCheckout(res.data.data);
            router.push("/checkout/success")
        }).catch(err => {
            setOpen(true);
            let e = err.response
            console.log(e)
            setMessageError(e);
        });
    };

    if (!data) {
        return (
            <>
                <Head>
                    <title>DH | Marvel Comics</title>
                    <meta name="description" content="Project generated by create next app for Certified Tech Developer checkpoint." />
                    <link rel="icon" href="/favicon.ico" />
                </Head>

                <BodySingle>
                    <h3>Loading...</h3>
                </BodySingle>
            </>
        );
    }

    return (
        <LayoutCheckout>

            <BodySingle title="Checkout">
                <Container
                    sx={{
                        display: 'flex',
                        gap: "2rem",
                        justifyContent: "space-around",
                    }}
                >
                    <FormControl component={"form"} onSubmit={handleSubmit(onSubmit)}>
                        <Card sx={{ padding: '2rem' }}>

                            <Typography variant="h6">Personal data:</Typography>
                            <InputBox>
                                <TextField
                                    {...register("customer.name")}
                                    label="Name"
                                    type="text"
                                    error={!!errors.customer?.name}
                                    required
                                />
                                {
                                    !!errors.customer?.name &&
                                    <Typography
                                        color="red"
                                        variant="body2"
                                        component="div"
                                    >
                                        {`${errors.customer?.name.message}`}
                                    </Typography>
                                }
                            </InputBox>
                            <InputBox>
                                <TextField
                                    {...register("customer.lastname")}
                                    label="Last Name"
                                    type="text"
                                    error={!!errors.customer?.lastname}
                                    required
                                />
                                {
                                    !!errors.customer?.lastname &&
                                    <Typography
                                        color="error"
                                        variant="body2"
                                        component="div"
                                    >
                                        {`${errors.customer?.lastname.message}`}
                                    </Typography>
                                }
                            </InputBox>
                            <InputBox>
                                <TextField
                                    {...register("customer.email")}
                                    label="E-mail"
                                    type="email"
                                    error={!!errors.customer?.email}
                                    required
                                />
                                {
                                    !!errors.customer?.email &&
                                    <Typography
                                        color="red"
                                        variant="body2"
                                        component="div"
                                    >
                                        {`${errors.customer?.email.message}`}
                                    </Typography>
                                }
                            </InputBox>
                        </Card>
                        <Card sx={{ padding: '2rem', marginTop: '1.5rem' }}>
                            <Typography sx={{ flexBasis: "100%" }}>Address: </Typography>
                            <InputBox>
                                <TextField
                                    {...register("customer.address.address1")}
                                    label="Adress"
                                    type="text"
                                    error={!!errors.customer?.address?.address1}
                                    required
                                />
                                {
                                    !!errors.customer?.address?.address1 &&
                                    <Typography
                                        color="red"
                                        variant="body2"
                                        component="div"
                                    >
                                        {`${errors.customer?.address?.address1.message}`}
                                    </Typography>
                                }
                            </InputBox>
                            <InputBox>
                                <TextField
                                    {...register("customer.address.address2")}
                                    label="Complement"
                                    type="text"
                                    error={!!errors.customer?.address?.address2}
                                />
                            </InputBox>
                            <InputBox>
                                <TextField
                                    {...register("customer.address.city")}
                                    label="City"
                                    type="text"
                                    error={!!errors.customer?.address?.city}
                                    required
                                />
                                {
                                    !!errors.customer?.address?.city &&
                                    <Typography
                                        color="red"
                                        variant="body2"
                                        component="div"
                                    >
                                        {`${errors.customer?.address?.city.message}`}
                                    </Typography>
                                }
                            </InputBox>
                            <InputBox>
                                <TextField
                                    {...register("customer.address.state")}
                                    label="State"
                                    type="text"
                                    error={!!errors.customer?.address?.state}
                                    required
                                />
                                {
                                    !!errors.customer?.address?.state &&
                                    <Typography
                                        color="red"
                                        variant="body2"
                                        component="div"
                                    >
                                        {`${errors.customer?.address?.state.message}`}
                                    </Typography>
                                }
                            </InputBox>
                            <InputBox>
                                <TextField
                                    {...register("customer.address.zipCode")}
                                    label="Zip Code"
                                    type="text"
                                    error={!!errors.customer?.address?.zipCode}
                                    required
                                />
                                {
                                    !!errors.customer?.address?.zipCode &&
                                    <Typography
                                        color="red"
                                        variant="body2"
                                        component="div"
                                    >
                                        {`${errors.customer?.address?.zipCode.message}`}
                                    </Typography>
                                }
                            </InputBox>
                        </Card>
                        <Card sx={{ padding: '2rem', margin: '1.5rem 0' }}>
                            <Typography sx={{ flexBasis: "100%" }}>Payment card: </Typography>
                            <InputBox>
                                <TextField
                                    {...register("card.number")}
                                    label="Card number"
                                    inputProps={{ maxLength: 19 }}
                                    inputMode="numeric"
                                    error={!!errors.card?.number}
                                    required
                                />
                                {
                                    !!errors.card?.number &&
                                    <Typography
                                        color="red"
                                        variant="body2"
                                        component="div"
                                    >
                                        {`${errors.card.number.message}`}
                                    </Typography>
                                }
                            </InputBox>
                            <InputBox>
                                <TextField
                                    {...register("card.nameOnCard")}
                                    label="Name on card"
                                    type="text"
                                    error={!!errors.card?.nameOnCard}
                                    required
                                />
                                {
                                    !!errors.card?.nameOnCard &&
                                    <Typography
                                        color="red"
                                        variant="body2"
                                        component="div"
                                    >
                                        {`${errors.card?.nameOnCard?.message}`}
                                    </Typography>
                                }
                            </InputBox>
                            <InputBox>
                                <TextField
                                    {...register("card.expDate")}
                                    label="Expiration date"
                                    type="text"
                                    error={!!errors.card?.expDate}
                                    required
                                />
                                {
                                    !!errors.card?.expDate &&
                                    <Typography
                                        color="red"
                                        variant="body2"
                                        component="div"
                                    >
                                        {`${errors.card?.expDate?.message}`}
                                    </Typography>
                                }
                            </InputBox>
                            <InputBox>
                                <TextField
                                    {...register("card.cvc")}
                                    inputProps={{ maxLength: 3, "data-testid": "cvc" }}
                                    label="CVC"
                                    type="password"
                                    error={!!errors.card?.cvc}
                                    required
                                />
                                {
                                    !!errors.card?.cvc &&
                                    <Typography
                                        color="red"
                                        variant="body2"
                                        component="div"
                                    >
                                        {`${errors.card?.cvc?.message}`}
                                    </Typography>
                                }
                            </InputBox>
                        </Card>
                        <Button type="submit" color='primary' variant="contained"
                            sx={{
                                marginBottom: '1rem',
                                fontWeight: 'bold',
                            }}
                        >
                            Confirm
                        </Button>
                    </FormControl>

                    <Card sx={{ maxWidth: 345, maxHeight: '70vw' }}>
                        <Typography variant="h4" marginTop='1rem' textAlign='center'>
                            Product
                        </Typography>
                        <CardMedia
                            component="img"
                            height='65%'
                            sx={{ margin: '1.5rem 0' }}
                            image={`${data.thumbnail.path}.${data.thumbnail.extension}`}
                            alt={data.title}
                        />
                        <CardContent>
                            <Typography variant="h6" component="div">
                                <Flag>Title:</Flag> {data.title}
                            </Typography>
                            <Typography
                                variant="h5"
                                sx={{
                                    marginTop: '1rem',
                                    marginBottom: '1rem',
                                }}
                            >
                                <Flag>Price:</Flag> ${(data.price).toFixed(2)}
                            </Typography>
                        </CardContent>
                    </Card>
                    <Snackbar
                        anchorOrigin={{ vertical: "top", horizontal: "right" }}
                        open={open}
                        autoHideDuration={2000}
                        key={1}
                        data-testid="alert-error"
                        onClose={() => setOpen(false)}
                    >
                        <div>
                            <Alert severity="error">{messageError}</Alert>
                        </div>
                    </Snackbar>
                </Container>
            </BodySingle>
        </LayoutCheckout>
    )
}

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
    const { id } = query;
    const data = await getComic(Number(id))

    return {
        props: {
            data
        }
    }
}


export default Checkout;