import { Box } from "@mui/system";
import { styled } from '@mui/system';
import Head from "next/head";
import BodySingle from "dh-marvel/components/layouts/body/single/body-single";
import { getCharacter } from "dh-marvel/services/marvel/marvel.service";
import { Character } from "../../types/types";
import { Button, Typography, Grid } from "@mui/material";


export const getStaticPaths = async () => {
    return {
        paths: [{ params: { id: "1009156" } }],
        fallback: true
    };
}

export async function getStaticProps({ params }: any) {
    const data = await getCharacter(Number(params.id))
    console.log(data)

    return {
        props: {
            data
        }
    }

}

const Description = styled(`p`)({
    padding: '1rem',
    textAlign: 'justify',
    fontSize: '2rem',
    textIndent: '1rem'
})

const SmallCard = styled(`div`)`
    width: 25vw;
    height: 20rem;
    border: solid 1px #1976d2;
    padding: 1rem;
    border-radius:1.5rem;
    display: flex;
    flex-wrap: wrap;
    align-items: flex-end;
    justify-content: center;
    text-align: center;
    margin: 0.5rem 2rem;    
`
interface CharacterDetail {
    data: Character;
};

export default function CharacterDetail({ data }: CharacterDetail) {
    const charac = data;

    console.log(charac)

    const getComics = charac?.comics.items.map(c => {
        let getId = new URL(c.resourceURI).pathname.split("/")[4];

        return {
            ...c,
            id: getId,
        }
    })

    if (!charac) {
        return (
            <>
                <Head>
                    <title>DH | Marvel Comics</title>
                    <meta name="description" content="Project generated by create next app for Certified Tech Developer checkpoint." />
                    <link rel="icon" href="/favicon.ico" />
                </Head>

                <BodySingle>
                    <h3>Loading...</h3>
                </BodySingle>
            </>
        );
    }

    return (
        <>
            <Head>
                <title>{`DH | Marvel Comics - ${charac?.name}`}</title>
                <meta name="og:description" content={charac?.description} />
                <meta name="og:title" content={charac?.name} />
            </Head>
            <BodySingle title={charac?.name}>
                <Box
                display='flex'
                justifyContent='center'
                flexGrow='column'
                flexWrap = 'wrap'
                >
                    <picture>
                        <img
                            src={charac?.thumbnail.path + "." + charac?.thumbnail.extension}
                            alt={charac?.name}
                        />
                    </picture>
                    <Description>{charac?.description}</Description>
                    <Grid
                        container
                        spacing={4}
                        marginBottom='2rem'
                    >
                        {
                            getComics.map(c => {
                                return (
                                    <Grid item key={c.id}>
                                        <SmallCard>
                                            <Typography gutterBottom variant="h4" component="div" marginTop='1rem'>
                                                {c.name}
                                            </Typography>
                                            <Button
                                                href={`/comics/${c.id}`}
                                                variant="contained"
                                                size="large"
                                                sx={{
                                                    height: '25%',
                                                    fontWeight: 'bold',
                                                    margin: '1rem 0'
                                                }}
                                            >
                                                Learn More
                                            </Button>
                                        </SmallCard>
                                    </Grid>
                                )
                            })
                        }
                    </Grid>
                </Box>
            </BodySingle>
        </>
    )
}
